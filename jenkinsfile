import hudson.model.*
label_check = hostNames('clarity-trunk-ci-ora-Pipeline')
def requiredNodes = label_check
for (node in requiredNodes) 
{
      println "Searching for t $node";
      def slave = Hudson.instance.slaves.find({it.name == node});
      if (slave != null)
       {
        computer = slave.getComputer();
        if (computer.isOffline())
         {
           println "Error! $node is offline.";
           if(label_check[-1]=="$node"){
               println "Error! $node is OFFLINE.";
               currentBuild.result = 'FAILURE';
               emailext ( attachLog: true,
		to: "team-ppm-clarity-scrum-missioncon1trol.pdl@broadcom.com",
		body: 'all NODES are Offline  More info at: "$BUILD_URL"', mimeType: 'text/html',
		subject: "Jenkins Builds ${currentBuild.currentResult}: Job ${env.JOB_NAME}")
           }
          else{
              continue;
          }
         }
         else 
         {
           println "OK: $node is online";
           if(computer.isAcceptingTasks())
           {
             break;
           }
         }
       }
       else 
       {
         println "Slave $node not found!"; 
       }
     }

def hostNames(label) {
 def nodes = []
 jenkins.model.Jenkins.instance.computers.each { c ->
   if (c.node.labelString.contains(label)) {
     nodes.add(c.node.selfLabel.name)
   }
 }
 return nodes
}

pipeline {
    agent { 
    node {
    label "clarity-trunk-ci-ora-Pipeline"
    customWorkspace "C://Users//Administrator//Documents//test1"
    }
    }
 parameters {
    string(defaultValue: '15.7.0', description: 'Current Release', name: 'release')
    string(defaultValue: 'localization', description: 'Build Type', name: 'build_type')
//    string(defaultValue: 'i18n-build-167', description: 'Agent Name', name: 'agent')
    string(defaultValue: 'z_vg646039_dev', description: 'Branch Name', name: 'branch')
    string(defaultValue: '${release}.${BUILD_NUMBER}', description: ' ', name: 'clarity_version')
  }

 options{
    buildDiscarder(logRotator(numToKeepStr:'4'))
    //skipDefaultCheckout()
    timeout(time: 2, unit: 'HOURS')
	// parallelsAlwaysFailFast()
 	// disableResume()
	//checkoutToSubdirectory('${env.GIT_relative_target_dir}')
    //overrideIndexTriggers(true)
    //ansiColor('vga')
    timestamps ()
    quietPeriod(10)
    retry(1)
}
triggers {
        pollSCM 'H/3 * * * *'
    }
    stages {
	  stage('Checkout')  
  { 
		    			steps{
					//checkout([$class: 'GitSCM', branches: [[name: '*/M2']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PathRestriction', includedRegions: '']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'venu_id1', url: 'https://github.com/venu148/sprint1.git']]])
checkout([$class: 'GitSCM', branches: [[name: '*/M2']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'ChangelogToBranch', options: [compareRemote: 'https://github.com/venu148/sprint1.git', compareTarget: 'M2']]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'venu_id1', url: 'https://github.com/venu148/sprint1.git']]])
}
}

		stage('LOCALIZATIONBUILDTARGET1'){
			steps{
			checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'M1']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PruneStaleBranch'], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'C://Users//Administrator//Documents']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'venu_id1', url: 'https://github.com/venu148/CI.git']]]

				script {
								sleep(260)
				
					}
				}
			}
			}
}
